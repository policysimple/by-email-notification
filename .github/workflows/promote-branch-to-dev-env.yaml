name: Promote project in feature branch to dev environment (create GitHub tag and push to Docker Registry)

on:
  pull_request:
    branches:
      - dev
    types: [closed]

env:
  ORGANIZATION_NAME: ${{ vars.ORGANIZATION_NAME }}
  GH_REPO_OWNER: ${{ github.repository_owner }}
  GH_REPO_NAME: ${{ github.event.repository.name }}
  GH_USER_EMAIL: ${{ github.actor }}
  GH_USERNAME: ${{ github.actor }}

jobs:
  initialization:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: "dev"
          token: ${{ secrets.GH_TOKEN }}
      - name: "Check if Dockerfile exists (fail if it doesn't)"
        run: |
          if  ! [ -f "Dockerfile" ]; then
            echo "::error title='Dockerfile does not exist but it is required to proceed with this action'";
            exit 1;
          fi
  generate-semver-tag-number:
    needs: initialization
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.semver.outputs.version_tag }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Check that all tags have been brought from remote
        run: |
          echo "Will show all Git tags for the \"$GH_REPO_NAME\" repo "
          echo "$(git tag)"
      - name: semver
        id: semver
        uses: paulhatch/semantic-version@v5.0.2
        with:
          tag_prefix: "v"
          major_pattern: "(MAJOR)"
          minor_pattern: "(MINOR)"
          change_path: "" # Defaults to root of the GitHub repository.

  create-github-tag:
    needs: generate-semver-tag-number
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - env:
          TAG_NAME: ${{ needs.generate-semver-tag-number.outputs.tag_name }}
        name: Create tag
        uses: actions/github-script@v6
        with:
          script: |
            const { TAG_NAME } = process.env
            console.log(`The autogenerated tag name is "${TAG_NAME}"`)
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/tags/${TAG_NAME}`,
              sha: context.sha
            })
  build-push-image:
    needs:
      - generate-semver-tag-number
      - create-github-tag
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      pull-requests: write
    steps:
      - name: Set the name of image to be built
        id: docker-image-name
        env:
          TAG_NAME: ${{ needs.generate-semver-tag-number.outputs.tag_name }}
        run: |
          echo "Autotag name: $TAG_NAME"
          echo "set docker image name"
          echo "DOCKER_IMAGE_NAME=$(echo $ORGANIZATION_NAME/$GH_REPO_NAME:$TAG_NAME)" >> $GITHUB_ENV
          echo "DOCKER_IMAGE_NAME variable is: $DOCKER_IMAGE_NAME"
          echo "set autotag name as env variable"
          echo "AUTO_TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
          echo "IMAGE_NAME=$(echo $ORGANIZATION_NAME/$GH_REPO_NAME:$TAG_NAME)"
      # PENDING: Save autogenerated tag in the GitHub secrets to be used for later by K8s configs.
      # - name: Autogenerate tag for the commit and Docker Push
      #   run: |
      #     # echo "Updating image tag in values file"
      #     # sed -i "s,tag:.*,tag:\ ${{ github.sha }}," helm/webapp/values.yaml # Automatic tag generation line, TODO: Generate tags automatically based on "github.sha" value
      #     cd $GH_REPO_NAME
      #     echo "echo autotag name: $AUTO_TAG_NAME"
      #     echo "$AUTO_TAG_NAME" > auto-generated-tag.txt
      #     git add . && git commit -m "Update image tag"
      #     git push

      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: "dev"
          token: ${{ secrets.GH_TOKEN }}
      - name: clone submodule
        uses: actions/checkout@v3
        with:
          repository: cuemby/by-email-notification-sdk.git
          ref: "master"
          token: ${{ secrets.GH_TOKEN }}
          path: by-email-notification-sdk

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: "cuembybot"
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.DOCKER_IMAGE_NAME }}
